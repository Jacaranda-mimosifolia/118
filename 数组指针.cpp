一、数组指针
int(*p)[n]={};(n为要定义的个数)
运算符（.）:对象.成员名 
运算符（->）:对象指针.成员名 
先定义指针(*p)，再定义数组[n]，因此是指针数组。它指向了含有n个int类型的数组。 
其中p在内存中是指向数组的首地址，而非数组首元素的地址 

数组地址和数组第一个元素的地址值是一样的，
但是指针指向这两个地址加一时的操作数不一样。 
指针指向数组地址，一加一的是数组的长度，
即数组元素个数*元素类型长度，5 * sizeof(int)=20； 
指针指向数组第一个元素，一加一的是第一个元素的长度，即sizeof(int)=4

二、数组指针与指针数组
1）int * a[5]是指针数组，本质上是一个数组，
	数组里存放的元素是指针，指针的类型是int *型，指向一个整型数。

2）int (*a)[5]是数组指针，本质上是一个指针，
	指针所指对象是一个数组，数组的类型是int [5]型。 

1、数组指针与一维数组
数组名可以代表两种含义：①数组首元素地址②整个数组
for(int i=0;i<5;i++)
{
    printf("%d ",*(*p+i));//遍历输出数组的值
}

2、数组指针与二维数组
int array[2][3]={{1,2,3},{4,5,6}};
int (*p)[3]=array;//二维数组的列数 j
for(int i=0;i<2;i++)
{
	for(int j=0;j<3;j++)
	{
		printf("arrar[%d][%d]=%d\n",i,j,*(*array+i));
	}
}
int （*p）[3]中的3，此处应该写上的是二维数组的列数，亦或者是每个一维数组的元素个数。

